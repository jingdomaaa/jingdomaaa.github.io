(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{512:function(s,t,a){"use strict";a.r(t);var v=a(4),_=Object(v.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("Boxx"),s._v(" "),a("h1",{attrs:{id:"重复消费、顺序消费、分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复消费、顺序消费、分布式事务"}},[s._v("#")]),s._v(" 重复消费、顺序消费、分布式事务")]),s._v(" "),a("h2",{attrs:{id:"消息队列的消息重复消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列的消息重复消费"}},[s._v("#")]),s._v(" 消息队列的消息重复消费")]),s._v(" "),a("h3",{attrs:{id:"什么是消息重复消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是消息重复消费"}},[s._v("#")]),s._v(" 什么是消息重复消费")]),s._v(" "),a("ul",[a("li",[s._v("消息"),a("strong",[s._v("重复消费")]),s._v("是使用消息队列之后，必须要考虑的一个问题，也是较为 Problem solving 的问题，在开发过程中，但凡用到了消息队列，第一时间要考虑的就是"),a("strong",[s._v("重复消费")]),s._v("的问题。")])]),s._v(" "),a("h3",{attrs:{id:"为什么会消息重复消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会消息重复消费"}},[s._v("#")]),s._v(" 为什么会消息重复消费")]),s._v(" "),a("ul",[a("li",[s._v("假设有这样一个场景，用户下单成功后，我需要去一个活动页面给他加"),a("strong",[s._v("GMV")]),s._v("(销售总额)，最后根据他的GMV去给他发奖励，这是电商活动很常见的玩法。")]),s._v(" "),a("li",[s._v("类似下单金额到某个梯度，给你返回对应梯度的奖励")]),s._v(" "),a("li",[s._v("这样的活动百分百是用"),a("strong",[s._v("异步")]),s._v("去加的，不然一个用户下一单就给他加一下，那就意味着对那张表就要操作一下，你考虑下双十一当天多少次对这个表操作？这数据库或者缓存都顶不住吧。")]),s._v(" "),a("li",[s._v("而且大家应该也有这样的体会，在你下单之后马上去看一些活动页面，有时候马上就有了，有时候却延迟很久，这个速度"),a("strong",[s._v("取决于消息队列的消费速度")]),s._v("，消费堵塞了自然看到的就慢了。")]),s._v(" "),a("li",[s._v("你下个单"),a("strong",[s._v("支付成功")]),s._v("你就发个消息出去，上面那个活动的开发人员就监听你的"),a("strong",[s._v("支付成功消息")]),s._v("，那我就去我活动"),a("strong",[s._v("GMV")]),s._v("表里给你加上去，到这里大家可能觉得顺理成章。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving1.png",alt:""}})]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("但是")]),s._v("一般消息队列的使用都是有"),a("strong",[s._v("重试机制")]),s._v("的，就是说下游的业务发生异常了，会输出异常并且要求你重发一次。")])]),s._v(" "),a("li",[a("p",[s._v("不过这个活动这里发生错误，要求重发肯定没问题，但是不止一个服务在监听这个消息，还有"),a("strong",[s._v("别的服务也在监听")]),s._v("，那就会出现系统"),a("strong",[s._v("本来是成功的，却重发了")]),s._v("。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving2.png",alt:""}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("就好比上面这样，"),a("strong",[s._v("优惠券系统处理失败")]),s._v("了，这个系统肯定要求"),a("strong",[s._v("重发")]),s._v("一次这个消息，优惠券的系统重新接收并且处理成功了，但是其他的积分等服务"),a("strong",[s._v("也监听了这个消息")]),s._v("，那就可能出现活动系统给用户的GMV添加了两次、积分扣两次这种情况。")])]),s._v(" "),a("li",[a("p",[s._v("现实中其实重试是很正常的，"),a("strong",[s._v("服务的网络波动")]),s._v("，"),a("strong",[s._v("开发人员代码bug")]),s._v("还有"),a("strong",[s._v("数据问题等")]),s._v("都可能导致处理失败要求重发的。")])])]),s._v(" "),a("h3",{attrs:{id:"如何解决消息重复消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决消息重复消费"}},[s._v("#")]),s._v(" 如何解决消息重复消费")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("通过"),a("strong",[s._v("接口幂等")]),s._v("保证消息一致性")]),s._v(" "),a("blockquote",[a("p",[s._v("幂等(idempotent，idempotence)是一个数学与计算机概念，常见于抽象代数中。")]),s._v(" "),a("p",[s._v("在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。")]),s._v(" "),a("p",[s._v("幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。")]),s._v(" "),a("p",[s._v('例如，"setTrue()"函数就是一个幂等函数，无论多次执行，其结果都是一样的，更复杂的操作幂等保证是利用唯一交易号（流水号）实现。')])])])]),s._v(" "),a("p",[s._v("通俗来说就是"),a("strong",[s._v("同样的参数调用接口，调用多少次结果都是一个")]),s._v("，加GMV同一个订单号加一次是多少钱加n次还是多少钱。流程如下图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving3.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"如何保证已解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证已解决"}},[s._v("#")]),s._v(" 如何保证已解决")]),s._v(" "),a("ul",[a("li",[s._v("一般幂等需要分场景考虑，看是强校验还是弱校验，比如跟金钱相关的场景那就很关键，就做强校验，不是很重要的场景就做弱校验。")])]),s._v(" "),a("h4",{attrs:{id:"强校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强校验"}},[s._v("#")]),s._v(" 强校验")]),s._v(" "),a("ul",[a("li",[s._v("比如监听到用户支付成功的消息，监听到了去加GMV就要调用加GMV的接口，那在加GMV接口下面再调用一个加流水的接口，"),a("strong",[s._v("两个放在一个事务里，成功一起成功，失败一起失败。")])]),s._v(" "),a("li",[s._v("每次消息过来都要拿着"),a("strong",[s._v("订单号+业务场景这样的唯一标识")]),s._v("（比如天猫双十一活动）去流水表查，看看有没有这条流水，有就直接return不要走下面的流程了，没有就执行后面的逻辑。")]),s._v(" "),a("li",[s._v("之所以用"),a("strong",[s._v("流水表")]),s._v("，是因为涉及到金钱这样的活动，有啥问题后面也可以去流水表对账，还有就是帮助开发人员定位问题。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n  *强校验幂等伪代码展示,这都是简单的伪代码,真实情况复杂一点,但是大的逻辑是这样\n  *\n  *@param orderId\n  *@Author: jingdom\n  */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查询这个订单是否存在这个活动加GMV的流水")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" gmvFlow "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getFlowByOrderId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"addGmv"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gmvFlow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不存在流水,去加GMV和加流水,注意这两个在一个事务,回滚就一起回滚了")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addGmvAndFlow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//存在流水证明加过了,返回就好了")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//发送异常,触发消息队列框架重试机制")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h4",{attrs:{id:"弱校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弱校验"}},[s._v("#")]),s._v(" 弱校验")]),s._v(" "),a("ul",[a("li",[s._v("这个简单，一些不重要的场景,比如给谁发短信啥的，我就把这个id+场景唯一标识作为"),a("strong",[s._v("Redis")]),s._v("的key，放到缓存里面失效时间看你场景，"),a("strong",[s._v("一定时间内")]),s._v("的这个消息就去"),a("strong",[s._v("Redis")]),s._v("判断。")]),s._v(" "),a("li",[s._v("用KV就算消息丢失了可能这样的场景也没关系，反正丢条"),a("strong",[s._v("无关痛痒")]),s._v("的通知短信（你敢说你没验证码短信丢失的情况？）。")]),s._v(" "),a("li",[s._v("还有很多公司的弱校验用token啊什么的，反正花样很多，但是"),a("strong",[s._v("重要的场景一定要强校验")]),s._v("，真正查问题的时候没有在磁盘持久化的数据，心里还是空空的。")])]),s._v(" "),a("h2",{attrs:{id:"消息顺序消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息顺序消费"}},[s._v("#")]),s._v(" 消息顺序消费")]),s._v(" "),a("h3",{attrs:{id:"什么是消息顺序消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是消息顺序消费"}},[s._v("#")]),s._v(" 什么是消息顺序消费")]),s._v(" "),a("ul",[a("li",[s._v("说实话顺序消费这里很难介绍，开发过程中这样的场景不多，网上更多的都是介绍"),a("strong",[s._v("binlog")]),s._v("的同步，好像更多的场景就没了。")]),s._v(" "),a("li",[s._v("一般都是"),a("strong",[s._v("同个业务场景下不同几个操作的消息同时过去")]),s._v("，本身顺序是对的，但是你发出去的时候同时发出去了。消费的时候却乱掉了，这样就有问题了。")]),s._v(" "),a("li",[s._v("电商活动数据量大的时候数据同步压力还是很大的，有时候数据量大的表需要同步几个亿数据。（并不是主从同步，主从延迟大的话会有问题，可能是从数据库或者主数据库同步到"),a("strong",[s._v("备库")]),s._v("）")]),s._v(" "),a("li",[s._v("这种情况我们都是放到队列里面去，然后慢慢消费的，那问题就来了呀，我们在数据库同时对一个id的数据进行了增、改、删三个操作，但是消息发过去的时候变成了改、删、增，这样数据就不对了。本来一条数据应该删掉了，结果你那却还在，这不是"),a("strong",[s._v("出大问题")]),s._v("。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving4.png",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("两者结果完全不一样了。")])]),s._v(" "),a("h3",{attrs:{id:"如何解决消息顺序消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决消息顺序消费"}},[s._v("#")]),s._v(" 如何解决消息顺序消费")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("简单说一下使用"),a("strong",[s._v("RoketMQ")]),s._v("里面的一个简单实现。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Tip")]),s._v("：为什么要用"),a("strong",[s._v("RocketMQ")]),s._v("举例呢，这个是阿里开源的，很多公司都有使用，具体细节后面会在"),a("strong",[s._v("RocketMQ")]),s._v("和"),a("strong",[s._v("Kafka")]),s._v("各自的章节说到。")])]),s._v(" "),a("li",[a("p",[s._v("生产者消费者一般需要保证顺序消息的话，可能就是一个业务场景下的，比如订单的创建、支付、发货、收货。")])]),s._v(" "),a("li",[a("p",[s._v("那这些东西是不是一个订单号呢？一个订单肯定是一个订单号的，那就简单了。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("一个topic下有多个队列")]),s._v("，为了保证发送有序，RocketMQ提供了MessageQueueSelector（消息队列选择器）队列选择机制，他有三种实现：")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving5.png",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("我们可使用"),a("strong",[s._v("Hash取模法")]),s._v("，让同一个订单发送到同一个队列中，再使用同步发送，只有同个订单的创建消息发送成功，再发送支付消息。这样，我们保证了发送有序。")]),s._v(" "),a("li",[a("strong",[s._v("RocketMQ")]),s._v("的topic内的队列机制，可以保证储存满足"),a("strong",[s._v("FIFO")]),s._v("（first input first output先进先出），剩下的只要消费者顺序消费就行。")]),s._v(" "),a("li",[a("strong",[s._v("RocketMQ")]),s._v("仅保证顺序发送，顺序消费由消费者业务保证。")]),s._v(" "),a("li",[s._v("这里很好理解，一个订单发送的时候放到一个队列里面去，同一个的订单号"),a("strong",[s._v("Hash")]),s._v("一下是不是还是一样的结果，那肯定是一个消费者消费，那顺序就保证了。")]),s._v(" "),a("li",[s._v("真正的顺序消费不同的中间件都有·自己的不同实现，在这里就举个例子，方便思路理解。")]),s._v(" "),a("li",[s._v("那有人可能会想一个队列有序出去，一个消费者消费不就好了，但是"),a("strong",[s._v("消费者是多线程的")]),s._v("，消息是有序给他的，但你可以保证他是有序处理的吗？所以还是一个消费成功了再发下一个稳妥。")])]),s._v(" "),a("h2",{attrs:{id:"分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[s._v("#")]),s._v(" 分布式事务")]),s._v(" "),a("ul",[a("li",[s._v("分布式事务在现在遍地都是分布式部署的系统中几乎是必要的。")])]),s._v(" "),a("h3",{attrs:{id:"什么是事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是事务"}},[s._v("#")]),s._v(" 什么是事务")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("分布式事务、事务隔离级别、ACID")]),s._v("我相信大家这些东西已经耳熟能详了，那什么是事务呢？")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("概念：")])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("一般是指要做的或所做的事情。")])]),s._v(" "),a("p",[s._v("在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元（unit）。")]),s._v(" "),a("p",[s._v("事务通常由高级数据库操纵语言或编程语言（如SQL、C++和Java）书写的用户程序的执行 所引起的，并用形如"),a("strong",[s._v("begin transaction")]),s._v("和"),a("strong",[s._v("end transaction")]),s._v("语句（或函数调用）来界定。")]),s._v(" "),a("p",[s._v("事务由事务开始("),a("strong",[s._v("begin transaction")]),s._v(")和事务结束("),a("strong",[s._v("end transaction")]),s._v(")之间执行的全体操纵组成。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("特性：")])]),s._v(" "),a("blockquote",[a("p",[s._v("事务是"),a("strong",[s._v("恢复")]),s._v("和"),a("strong",[s._v("并发控制")]),s._v("的基本单位。")]),s._v(" "),a("p",[s._v("事务应该具有四个属性："),a("strong",[s._v("原子性、一致性、隔离性、持久性。"),a("strong",[s._v("这四个属性通常称为")]),s._v("ACID特性")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("原子性（atomicity）")]),s._v("：一个事务是一个不可分割的工作单位，事务中包括的操作要么都做，要么都不做。")]),s._v(" "),a("p",[a("strong",[s._v("一致性（consistency）")]),s._v("：一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。")]),s._v(" "),a("p",[a("strong",[s._v("持久性（durability）")]),s._v("："),a("strong",[s._v("持久性也成永久性（permanence）")]),s._v("，指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。")])])]),s._v(" "),a("li",[a("p",[s._v("总结来说就是："),a("strong",[s._v("事务就是一系列操作，要么同时成功，要么同时失败。"),a("strong",[s._v("然后会从事务的")]),s._v("ACID特性（原子性，一致性，隔离性，持久性）展开叙述")]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("事务就是为了保证一系列操作可以正常执行，它必须同时满足"),a("strong",[s._v("ACID特性")]),s._v("。")])])]),s._v(" "),a("h3",{attrs:{id:"什么是分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是分布式事务"}},[s._v("#")]),s._v(" 什么是分布式事务")]),s._v(" "),a("ul",[a("li",[s._v("大家可以想一下，下单流程可能涉及到10多个环节，用户下单付钱都成功了，但是优惠券扣减失败了，积分新增失败了，前者公司被薅羊毛，后者用户会不开心，但是"),a("strong",[s._v("这些都在不同的服务")]),s._v("，怎么保证大家都成功呢？")]),s._v(" "),a("li",[a("strong",[s._v("分布式事务")])]),s._v(" "),a("li",[s._v("Tip：真实的应用场景可能比我介绍的场景复杂数倍，我只是为了举例方便理解，所以用了很简单的例子。")])]),s._v(" "),a("h3",{attrs:{id:"有哪些分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些分布式事务"}},[s._v("#")]),s._v(" 有哪些分布式事务")]),s._v(" "),a("ul",[a("li",[s._v("我接触和了解到的分布式事务大概分为：\n"),a("ul",[a("li",[s._v("2pc（两段式提交）")]),s._v(" "),a("li",[s._v("3pc（三段式提交）")]),s._v(" "),a("li",[s._v("TCC（Try, Confirm, Cancel  尝试，确认，取消 ）")]),s._v(" "),a("li",[s._v("最大努力通知")]),s._v(" "),a("li",[s._v("XA")]),s._v(" "),a("li",[s._v("本地消息表（eBay研发出的）")]),s._v(" "),a("li",[s._v("半消息/最终一致性(RocketMQ)")])])]),s._v(" "),a("li",[s._v("这里我就介绍下最简单的2pc，以及大家以后可能比较常用的"),a("strong",[s._v("半消息事务")]),s._v("也就是"),a("strong",[s._v("最终一致性")]),s._v("，目的是让大家理解下分布式事务里面消息中间件的作用，别的事务都大同小异，都有很多优点。")]),s._v(" "),a("li",[s._v("当然也有"),a("strong",[s._v("种种弊端")]),s._v("：\n"),a("ul",[a("li",[a("strong",[s._v("长时间锁定数据库资源")]),s._v("，导致系统"),a("strong",[s._v("响应不快，并发上不去。")])]),s._v(" "),a("li",[s._v("网络抖动出现"),a("strong",[s._v("脑裂")]),s._v("情况，导致事务参与者不能很好地执行协调者的指令，导致"),a("strong",[s._v("数据不一致")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("单点故障")]),s._v("：例如事务协调者，在某一时刻宕机，虽然可以通过选举机制产生新的Leader，但是这过程中，必然出现问题，而TCC只有强悍的技术团队才能支持开发，"),a("strong",[s._v("成本太高")]),s._v("。")])])])]),s._v(" "),a("h4",{attrs:{id:"_2pc（两段式提交）："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2pc（两段式提交）："}},[s._v("#")]),s._v(" "),a("strong",[s._v("2pc（两段式提交）")]),s._v("：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving6.png",alt:""}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("2pc（两段式提交）"),a("strong",[s._v("可以说是分布式事务最开始的样子了，像极了")]),s._v("媒婆")]),s._v("，就是通过中间件协调多个系统，在两个系统操作事务的时候都锁定资源但是不提交事务，等两者都准备好了，告诉消息中间件，然后再分别提交事务。")]),s._v(" "),a("li",[s._v("但是如果A系统提交成功了，但是B系统在提交的时候网络波动或者各种原因提交失败了，其实还是会失败的。")])]),s._v(" "),a("h4",{attrs:{id:"半消息-最终一致性（rocketmq）："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#半消息-最终一致性（rocketmq）："}},[s._v("#")]),s._v(" 半消息/最终一致性（RocketMQ）：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving7.png",alt:""}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("整个流程我们能保证的是：")]),s._v(" "),a("ul",[a("li",[s._v("业务主动方本地事务提交失败，业务被动方不会收到消息的投递。")]),s._v(" "),a("li",[s._v("只要业务主动方本地事务执行成功，那么消息服务一定会投递消息给下游的业务被动方，并最终保证业务被动方一定能成功消费该消费（消费成功或失败，即最终一定会有一个最终态）。")])])]),s._v(" "),a("li",[a("p",[s._v("不过呢技术就是这样，"),a("strong",[s._v("各种极端的情况我们都需要考虑")]),s._v("，也很难有完美的方案，所以才会有这么多的方案，"),a("strong",[s._v("三段式，TCC，最大努力通知")]),s._v("等等分布式事务方案，大家只需要知道为什么要做，做了有什么好处，有什么坏处，在实际开发的时候注意下就好了，"),a("strong",[s._v("系统是根据业务场景设计出来的，离开业务的技术没有意义，离开业务的技术没有底气。")])])])])],1)}),[],!1,null,null,null);t.default=_.exports}}]);