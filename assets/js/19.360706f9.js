(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{502:function(t,s,a){"use strict";a.r(s);var r=a(4),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("Boxx"),t._v(" "),a("h1",{attrs:{id:"rocketmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq"}},[t._v("#")]),t._v(" RocketMQ")]),t._v(" "),a("h2",{attrs:{id:"rocketmq简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq简介"}},[t._v("#")]),t._v(" RocketMQ简介")]),t._v(" "),a("blockquote",[a("p",[t._v("RocketMQ是一个纯Java、分布式、队列模型的开发消息的开源消息中间件，前身是MetaQ，是阿里参考Kafka特点研发的一个队列模型的消息中间件，后开源给apache基金会称为了apache的顶级开源项目，具有高性能、高可靠、高实时、分布式特点。")])]),t._v(" "),a("ul",[a("li",[t._v("我们再看下阿里给他取的名字：**Rocket ** 火箭，阿里这是希望他上天啊，不过我觉得这个名字确实挺酷的。")]),t._v(" "),a("li",[a("strong",[t._v("我们先看看他最新的官网")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ1.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"回顾一下他的心路历程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回顾一下他的心路历程"}},[t._v("#")]),t._v(" "),a("strong",[t._v("回顾一下他的心路历程")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("2007年")]),t._v("：淘宝实施了“五彩石”项目，“五彩石”用于将交易系统从单机变成分布式，也是在这个过程中产生了阿里巴巴第一代消息引擎——"),a("strong",[t._v("Notify")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("2010年")]),t._v("：阿里巴巴B2B部门基于ActiveMQ的5.1版本也开发了自己的一款消息引擎，称为Napoil，这款消息引擎在B2B里面被广泛地使用，不仅仅是在交易领域，在很多的后台异步解耦等方面也得到了广泛地应用。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("2011年")]),t._v("：业界出现了现在被很多大数据领域所推崇的Kafka消息引擎，阿里巴巴在研究了Kafka的整体机制和架构设计之后，基于Kafka的设计使用Java进行了完全重写并推出了"),a("strong",[t._v("MetaQ 1.0")]),t._v("版本，主要是用于解决顺序消息和海量堆积的问题。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("2012年")]),t._v("：阿里巴巴开源其自研的第三代分布式消息中间件——"),a("strong",[t._v("RocketMQ")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("经过几年的技术打磨，阿里称基于RocketMQ技术，目前双十一当天消息容量可达到万亿级别。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("2016年11月")]),t._v("：阿里将RocketMQ捐献给"),a("strong",[t._v("apache")]),t._v("软件基金会，正式成为孵化项目。")])]),t._v(" "),a("li",[a("p",[t._v("阿里称会将其打造成顶级项目。"),a("strong",[t._v("这是阿里迈出的一大步")]),t._v("，因为加入到开源软件基金会需要经过评审方的考核与观察。")])]),t._v(" "),a("li",[a("p",[t._v("坦率而言，业界对国人的代码开源参与度仍保持着刻板印象；而apache基金会中的342个项目中，暂时还只有Kylin、CarbonData、Eagle、Dubbo和RocketMQ共计五个中国技术人主导的项目。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("2017年2月20日")]),t._v("：RocketMQ正式发布4.0版本，专家称最新版本适用于电商领域、金融领域、大数据领域、兼有物联网领域的编程模型。")])]),t._v(" "),a("li",[a("p",[t._v("以上就是RocketMQ的整体发展历史，其实在阿里巴巴内部围绕着RocketMQ内核打造了三款产品，分别是"),a("strong",[t._v("MetaQ、Notify和Aliware MQ")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("这三者分别采用了不同的模型，"),a("strong",[t._v("MetaQ")]),t._v("主要使用了"),a("strong",[t._v("拉模型，解决了顺序消息和海量堆积问题")]),t._v("："),a("strong",[t._v("Notify")]),t._v("主要使用了"),a("strong",[t._v("推模型，解决了事务消息")]),t._v("；而云产品"),a("strong",[t._v("Aliware MQ")]),t._v("则是提供了商业化的版本。")])])]),t._v(" "),a("h3",{attrs:{id:"经历多次双十一洗礼的英雄"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经历多次双十一洗礼的英雄"}},[t._v("#")]),t._v(" 经历多次双十一洗礼的英雄")]),t._v(" "),a("ul",[a("li",[t._v("在备战2016年双十一时，RocketMQ团队重点做了两件事情，"),a("strong",[t._v("优化慢请求")]),t._v("与"),a("strong",[t._v("统一储存引擎")]),t._v("。\n"),a("ul",[a("li",[a("strong",[t._v("优化慢请求")]),t._v("：这里主要是解决在海量高并发场景下降低慢请求对整个集群带来的抖动，"),a("strong",[t._v("毛刺问题")]),t._v("。这是一个极具挑战的技术活，团队同学经过长达一个多月的跟进调优，从双十一的复盘情况来看，99.996%的延迟落在了10ms以内，而"),a("strong",[t._v("99.6%的延迟在1ms以内")]),t._v("。优化主要集中在"),a("strong",[t._v("RocketMQ")]),t._v("存储层算法优化，JVM与操作系统调优。更多的细节大家可以参考《万亿级数据洪峰下的分布式消息引擎》。")]),t._v(" "),a("li",[a("strong",[t._v("统一储存引擎")]),t._v("：主要解决消息引擎的高可用，成本问题。在多代消息引擎共存的前提下，我们对Notify的储存模块进行了全面移植与替换。")])])]),t._v(" "),a("li",[a("strong",[t._v("RocketMQ天生为金融互联网领域而生")]),t._v("，追求高可靠、高可用、高并发、低延迟，是一个阿里巴巴由内而外成功孕育的典范，除了阿里集团上千个应用外，根据不完全统计，国内至少有上百家单位，科研教育机构在使用。")]),t._v(" "),a("li",[a("strong",[t._v("RocketMQ")]),t._v("在阿里集团也被广泛应用在订单、交易、充值、流计算、消息推送、日志流式处理、"),a("strong",[t._v("binlog")]),t._v("分发等场景。")])]),t._v(" "),a("h2",{attrs:{id:"rocketmq所拥有的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq所拥有的功能"}},[t._v("#")]),t._v(" RocketMQ所拥有的功能")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("直接去GitHub上看apache对它的描述可能会好点。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Apache RocketMQ是一种分布式消息传递和流平台，具有低延迟，高性能和可靠性，万亿级容量和灵活的可伸缩性。")])])]),t._v(" "),a("li",[a("p",[t._v("它具有多种功能：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("消息模式，包括发布/订阅，请求/答复和流式传输")])]),t._v(" "),a("li",[a("p",[t._v("财务级交易信息")])]),t._v(" "),a("li",[a("p",[t._v("基于DLedger的内置容错和高可用性配置选项")])]),t._v(" "),a("li",[a("p",[t._v("各种跨语言客户端，例如Java，C / C ++，Python，Go")])]),t._v(" "),a("li",[a("p",[t._v("可插拔的传输协议，例如TCP，SSL，AIO")])]),t._v(" "),a("li",[a("p",[t._v("内置消息跟踪功能，还支持opentracing")])]),t._v(" "),a("li",[a("p",[t._v("多功能的大数据和流生态系统集成")])]),t._v(" "),a("li",[a("p",[t._v("按时间或偏移量追溯消息")])]),t._v(" "),a("li",[a("p",[t._v("可靠的FIFO和严格排序的消息传递在同一队列中")])]),t._v(" "),a("li",[a("p",[t._v("高效的推拉消费模式")])]),t._v(" "),a("li",[a("p",[t._v("单个队列中的百万级消息累积容量")])]),t._v(" "),a("li",[a("p",[t._v("多种消息传递协议，例如JMS和OpenMessaging")])]),t._v(" "),a("li",[a("p",[t._v("灵活的分布式横向扩展部署架构")])]),t._v(" "),a("li",[a("p",[t._v("闪电般的批量消息交换系统")])]),t._v(" "),a("li",[a("p",[t._v("各种消息过滤器机制，例如SQL和Tag")])]),t._v(" "),a("li",[a("p",[t._v("用于隔离测试和云隔离群集的Docker映像")])]),t._v(" "),a("li",[a("p",[t._v("功能丰富的管理仪表板，用于配置，指标和监视")])]),t._v(" "),a("li",[a("p",[t._v("认证和授权")])]),t._v(" "),a("li",[a("p",[t._v("免费的开源连接器，适用于源和接收器")])])])])]),t._v(" "),a("h2",{attrs:{id:"rocketmq项目结构组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq项目结构组成"}},[t._v("#")]),t._v(" RocketMQ项目结构组成")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ2.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"rocketmq的核心模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq的核心模块"}},[t._v("#")]),t._v(" RocketMQ的核心模块")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- rocketmq-broker：接受生产者发来的消息并存储（通过调用rocketmq-store），消费者从这里取得消息\n- rocketmq-client：提供发送，接受消息的客户端api\n- rocketmq-namesrv：NameServer，类似于Zookeeper，这里保存着消息的TopicName，队列等运行时的元信息\n- rocketmq-common：通用的一些类，方法，数据结构等\n- rocketmq-remoting：基于Netty4的client/server + fastjson序列化 + 自定义二进制协议\n- rocketmq-store：消息、索引存储等\n- rocketmq-filtersrv：消息过滤器的Server，需要注意的是，要实现这种过滤，需要上传代码到MQ！（一般而言，我们利用Tag足以满足大部分的过滤需求，如果更灵活更复杂的过滤需求，可以考虑filtersrv组件）\n- rocketmq-tools：命令行工具\n")])])]),a("h3",{attrs:{id:"rocketmq的架构组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq的架构组成"}},[t._v("#")]),t._v(" RocketMQ的架构组成")]),t._v(" "),a("ul",[a("li",[t._v("他主要有四大核心组成部分：NameServer，Broker、Producer和Consumer四部分")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ3.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Tip")]),t._v("：我们可以看到"),a("strong",[t._v("RocketMQ")]),t._v("啥都是"),a("strong",[t._v("集群")]),t._v("部署的，这是他"),a("strong",[t._v("吞吐量大，高可用")]),t._v("的原因之一，集群的模式也是很花哨，可以支持多master模式，多master多slave异步复制模式。多master多slave同步双写模式。")])]),t._v(" "),a("h3",{attrs:{id:"rocketmq各个集群组成部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq各个集群组成部分"}},[t._v("#")]),t._v(" RocketMQ各个集群组成部分")]),t._v(" "),a("h4",{attrs:{id:"nameserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nameserver"}},[t._v("#")]),t._v(" "),a("strong",[t._v("NameServer")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("> 主要负责对于源数据的管理，包括了对于**Topic**和路由信息的管理。\n")])])]),a("ul",[a("li",[a("strong",[t._v("NameServer")]),t._v("是一个功能齐全的服务器，其角色类似Dubbo中的Zookeeper，但NameServer与Zookeeper相比更轻量。主要是因为每个NameServer节点互相之间是独立的，没有任何信息交互。")]),t._v(" "),a("li",[a("strong",[t._v("NameServer")]),t._v("压力不会太大，平时主要开销是在维持心跳和提供Topic-Broker的关系数据。")]),t._v(" "),a("li",[t._v("但有一点需要注意，Broker向NameServer发心跳时，会带上当前自己所负责的所有"),a("strong",[t._v("Topic")]),t._v("信息，如果"),a("strong",[t._v("Topic")]),t._v("个数太多（万级别），会导致一次心跳中，就Topic的数据就几十M，网络情况差的话，网络传输失败，心跳失败，导致NameServer误认为Broker心跳失败。")]),t._v(" "),a("li",[a("strong",[t._v("NameServer")]),t._v("被设计成几乎无状态的，可以横向扩展，节点相互之间无通信，通过部署多台机器来标记自己是一个伪集群。")]),t._v(" "),a("li",[t._v("每个Broker在启动的时候会到NameServer注册，Producer在发送消息之前会根据Topic到"),a("strong",[t._v("NameServer")]),t._v("获取到Broker的路由信息，Consumer也会定时获取Topic的路由信息。")]),t._v(" "),a("li",[t._v("所以从功能上看NameServer应该是和Zookeeper差不多，据说RocketMQ的早期版本确实是使用的Zookeeper，后来改为自己的NameServer。")]),t._v(" "),a("li",[t._v("我们看一下"),a("strong",[t._v("Dubbo")]),t._v("中注册中心的角色，是不是真的一模一样，师出同门相似点真的很多：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ4.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"producer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#producer"}},[t._v("#")]),t._v(" Producer")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("> 消息生产者，负责产生消息，一般由业务系统负责产生消息。\n")])])]),a("ul",[a("li",[a("strong",[t._v("Producer")]),t._v("由用户进行分布式部署，消息由Producer通过多种"),a("strong",[t._v("负载均衡模式")]),t._v("发送到"),a("strong",[t._v("Broker")]),t._v("集群，发送低延时，支持快速失败。")]),t._v(" "),a("li",[t._v("RocketMQ提供了三种方式发送消息：同步、异步和单向\n"),a("ul",[a("li",[t._v("同步发送：同步发送至消息发送方发出数据后会在收到接收方发回响应后才发下一个数据包，一般用于重要通知消息，例如重要通知邮件，营销短信。")]),t._v(" "),a("li",[t._v("异步发送：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下一个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。")]),t._v(" "),a("li",[t._v("单向发送：单向发送指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。")])])])]),t._v(" "),a("h4",{attrs:{id:"broker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#broker"}},[t._v("#")]),t._v(" Broker")]),t._v(" "),a("blockquote",[a("p",[t._v(".消息中转角色，负责"),a("strong",[t._v("存储消息")]),t._v("，转发消息。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Broker")]),t._v("是具体提供业务的服务器，单个Broker节点与所有NameServer节点保持长连接及心跳，并会定时将Topic信息注册到NameServer，顺带一提底层的通信和连接都是基于Netty实现的。")]),t._v(" "),a("li",[a("strong",[t._v("Broker")]),t._v("负责消息存储，以Topic为纬度支持轻量级队列，单机可以支撑上万队列规模，支持消息排位模型。")]),t._v(" "),a("li",[t._v("官网上有数据显示：具有上亿级消息堆积能力，同时可严格保证消息的有序性。")])]),t._v(" "),a("h4",{attrs:{id:"consumer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumer"}},[t._v("#")]),t._v(" Consumer")]),t._v(" "),a("blockquote",[a("p",[t._v("消息消费者，负责消费消息，一般是后台系统负责异步消费。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Consumer")]),t._v("也由用户部署，支持"),a("strong",[t._v("PUSH")]),t._v("和"),a("strong",[t._v("PULL")]),t._v("两种消费模式，支持集群消费和广播消费，提供实时的"),a("strong",[t._v("消息订阅机制")]),t._v("。\n"),a("ul",[a("li",[t._v("pull：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以Pull称为主动消费型。")]),t._v(" "),a("li",[t._v("Push：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达是执行的回调接口留给用户应用程序来实现。所以Push称为被动消费类型，但从实现上看还是从消费服务器中拉取消息，不同于Pull的是Push首先要注册消费监听器，当监听器处触发后才开始消费消息。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ5.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message"}},[t._v("#")]),t._v(" Message")]),t._v(" "),a("blockquote",[a("p",[t._v("消息，就是要传输的信息。")])]),t._v(" "),a("ul",[a("li",[t._v("一条消息必须有一个主题（Topic），主题可以看做是你的信件要邮寄的地址。")]),t._v(" "),a("li",[t._v("一条消息也可以拥有一个可选的标签（Tag）和额外的键值对，它们可以用于设置一个业务Key并在Broker上查找此消息以使在开发期间查找问题。")])]),t._v(" "),a("h4",{attrs:{id:"topic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#topic"}},[t._v("#")]),t._v(" Topic")]),t._v(" "),a("blockquote",[a("p",[t._v("主题，可以看做消息的规类，它是消息的第一级类型，比如一个电商系统可以分为：交易消息，物流消息等，一条消息必须有一个Topic。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Topic")]),t._v("与生产者和消费者的关系非常松散，一个Topic可以有0个，1个，多个消费者订阅。")])]),t._v(" "),a("h4",{attrs:{id:"tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" Tag")]),t._v(" "),a("blockquote",[a("p",[t._v("标签，可以看作子主题，它是消息的第二级类型，用于为用户提供额外的灵活性。使用标签，同一业务模块不同目的的消息就可以用相同Topic而不同的"),a("strong",[t._v("Tag")]),t._v("来标识。比如交易消息又可以分为：交易创建消息，交易完成消息等，一条消息可以没有"),a("strong",[t._v("Tag")]),t._v("。")])]),t._v(" "),a("ul",[a("li",[t._v("标签有助于保持您的代码干净和连贯，并且还可以为"),a("strong",[t._v("RocketMQ")]),t._v("提供的查询系统提供帮助。")])]),t._v(" "),a("h4",{attrs:{id:"group"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group"}},[t._v("#")]),t._v(" Group")]),t._v(" "),a("blockquote",[a("p",[t._v("分组，一个组可以订阅多个Topic。")])]),t._v(" "),a("ul",[a("li",[t._v("分为ProducerGroup，ConsumerGroup，代表某一类的生产者和消费者，一般来说同一个服务可以作为Group，同一个Group一般来说发送和消费的消息都是一样的。")])]),t._v(" "),a("h4",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("ul",[a("li",[t._v("在Kafka中叫Partition，每个Queue内部是有序的，在RocketMQ中分为读和写两种队列，一般来说读写队列数量一致，如果不一致会出现很多问题。")])]),t._v(" "),a("h4",{attrs:{id:"message-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-queue"}},[t._v("#")]),t._v(" Message Queue")]),t._v(" "),a("blockquote",[a("p",[t._v("消息队列，主题被划分为一个或多个子主题，即消息队列。")])]),t._v(" "),a("ul",[a("li",[t._v("一个Topic下可以设置多个消息队列，发送消息时执行该消息的Topic，RocketMQ会轮询该Topic下的所有队列将消息发出去。")]),t._v(" "),a("li",[t._v("消息的物理管理单位。一个Topic下可以有多个Queue，Queue的引入使得消息的存储可以分布式集群化，具有了水平扩展能力。")])]),t._v(" "),a("h4",{attrs:{id:"offset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#offset"}},[t._v("#")]),t._v(" Offset")]),t._v(" "),a("ul",[a("li",[t._v("在RocketMQ中，所有消息队列都是持久化，长度无限的数据结构，所谓长度无限是指队列中的每个存储单元都是定长，访问其中的存储单元使用Offset来访问，Offset为java long类型，64位，理论上在100年内不会溢出，所以认为是长度无限。")]),t._v(" "),a("li",[t._v("也可以认为Message Queue是一个长度无限的数组，Offset就是下标。")])]),t._v(" "),a("h4",{attrs:{id:"消息消费模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息消费模式"}},[t._v("#")]),t._v(" 消息消费模式")]),t._v(" "),a("ul",[a("li",[t._v("消息消费模式有两种：Clustering（集群消费）和Broadcasting（广播消费）。")]),t._v(" "),a("li",[t._v("默认情况下就是集群消费，该模式下一个消费者集群共同消费一个主题的多个队列，一个队列只会被一个消费者消费，如果某个消费者挂掉，分组内其他消费者会接替挂掉的消费者继续消费。")]),t._v(" "),a("li",[t._v("而广播消费消息会发给消费者组中的每一个消费者进行消费。")])]),t._v(" "),a("h4",{attrs:{id:"message-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-order"}},[t._v("#")]),t._v(" Message Order")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Message Order（消息顺序）有两种：Orderly（顺序消费）和Concuretly（并行消费）。")])]),t._v(" "),a("li",[a("p",[t._v("顺序消费表示消息消费的顺序同生产者为每个消息队列发送的顺序一致，所以如果正在处理全局顺序是强制性的场景，需要确保使用的主题只有一个消息队列。")])]),t._v(" "),a("li",[a("p",[t._v("并行消费不再保证消费顺序，消费的最大并行数量受每个消费者客户端指定的线程池限制。")])])]),t._v(" "),a("h3",{attrs:{id:"一次完整的通信流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一次完整的通信流程"}},[t._v("#")]),t._v(" 一次完整的通信流程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取"),a("strong",[t._v("Topic")]),t._v("路由信息，并向提供Topic服务的"),a("strong",[t._v("Broker Master")]),t._v("建立长连接，且定时向"),a("strong",[t._v("Broker")]),t._v("发送心跳。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Producer")]),t._v("只能将消息发送到"),a("strong",[t._v("Broker Master")]),t._v("建立长连接，但是Consumer则不一样，他同时和提供Topic服务的Master和Slave建立长连接，既可以从Broker Master订阅消息，也可以从Broker Slave订阅消息。")])]),t._v(" "),a("li",[a("p",[t._v("上面说过它跟"),a("strong",[t._v("Dubbo")]),t._v("像不是瞎说的，就连它的注册过程都很像"),a("strong",[t._v("Dubbo")]),t._v("的服务暴露过程。")])])]),t._v(" "),a("h4",{attrs:{id:"nameservice启动流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nameservice启动流程"}},[t._v("#")]),t._v(" NameService启动流程")]),t._v(" "),a("ul",[a("li",[t._v("在org.apache.rocketmq.namesrv目录下的NamesrvStartup这个启动类基本上描述了他的启动过程我们看一下代码：\n"),a("ul",[a("li",[t._v("1.初始化配置")]),t._v(" "),a("li",[t._v("2.创建NamesrvController实例，并且开启两个定时任务：\n"),a("ul",[a("li",[t._v("每隔10s扫描一次Broker，移除处于不激活的Broker；")]),t._v(" "),a("li",[t._v("每隔10s打印一次KV配置。")])])])])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scheduledExecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleAtFixedRate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NamesrvController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("routeInfoManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanNotActiveBroker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scheduledExecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleAtFixedRate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NamesrvController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("routeInfoManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printAllPeriodically")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MINUTES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("ul",[a("li",[t._v("3.注册钩子函数，启动服务器并监听Broker")]),t._v(" "),a("li",[t._v("NameServer还有很多东西的，这里就介绍他的启动流程，还可以去看看代码，还是很有意思的，比如路由注册会发送心跳包，还有心跳包的"),a("strong",[t._v("处理流程，路由删除，路由发现")]),t._v("等等。")])]),t._v(" "),a("h4",{attrs:{id:"producer-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#producer-2"}},[t._v("#")]),t._v(" Producer")]),t._v(" "),a("ul",[a("li",[t._v("链路很长涉及的细节也多,我就发一下链路图")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ6.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("Peoducer是消息发送方，那它是如何发送的呢？")]),t._v(" "),a("li",[t._v("通过"),a("strong",[t._v("轮训")]),t._v("，Producer轮训某个Topic下面的所有队列实现发送方的负载均衡。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ7.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"broker-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#broker-2"}},[t._v("#")]),t._v(" Broker")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Broker")]),t._v("在RocketMQ中是进行处理Producer发送消息请求，Consumer消费消息的请求，并且进行消息的请求，并且进行消息的持久化，以及"),a("strong",[t._v("HA策略")]),t._v("和"),a("strong",[t._v("服务端过滤")]),t._v("，就是集群中很重的工作都是交给了"),a("strong",[t._v("Broker")]),t._v("进行处理。")]),t._v(" "),a("li",[t._v("Broker模块是通过BrokerStartup进行启动的，会实例化BrokerController，并且调用其初始化方法。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BrokerController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BrokerController")]),t._v(" controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n\t\tcontroller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" tio "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The broker["')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBrokerConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBrokerName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBrokerAddr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"] boot success. serializeType="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RemotingCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSerializeTypeConfigInThisServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBrokerConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNamesrvAddr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \ttip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" and name server is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBrokerConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNamesrvAddr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    \tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s%n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("ul",[a("li",[t._v("大家去看Broker的源码的话会发现，它的初始化流程很冗长，会根据配置创建很多线程池主要用来"),a("strong",[t._v("发送消息")]),t._v("、"),a("strong",[t._v("拉取消息")]),t._v("、"),a("strong",[t._v("查询消息")]),t._v("、"),a("strong",[t._v("客户端管理")]),t._v("和"),a("strong",[t._v("消费者管理")]),t._v("，也有很多"),a("strong",[t._v("定时任务")]),t._v("，同时也注册了很多"),a("strong",[t._v("请求处理器")]),t._v("，用来发送拉取消息查询消息的。")])]),t._v(" "),a("h4",{attrs:{id:"consumer-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumer-2"}},[t._v("#")]),t._v(" Consumer")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ8.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("Consumer是消息接受,那它是怎么接受消息的？")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ9.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("消费会通过"),a("strong",[t._v("RebalanceService")]),t._v("线程，10s做一次基于"),a("strong",[t._v("Topic")]),t._v("下的所有队列负载。")])]),t._v(" "),a("h2",{attrs:{id:"面试常见问题分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试常见问题分析"}},[t._v("#")]),t._v(" 面试常见问题分析")]),t._v(" "),a("h3",{attrs:{id:"rocketmq的优缺点是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq的优缺点是什么"}},[t._v("#")]),t._v(" RocketMQ的优缺点是什么")]),t._v(" "),a("h4",{attrs:{id:"rocketmq优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq优点"}},[t._v("#")]),t._v(" RocketMQ优点")]),t._v(" "),a("ul",[a("li",[t._v("单机吞吐量：十万级")]),t._v(" "),a("li",[t._v("可用性：非常高，分布式架构")]),t._v(" "),a("li",[t._v("消息可靠性：经过参数优化配置，消息可以做到0丢失")]),t._v(" "),a("li",[t._v("功能支持：MQ功能较为完善，还是分布式的，扩展性好")]),t._v(" "),a("li",[t._v("支持10亿级别的消息堆积，不会因为堆积导致性能下降")]),t._v(" "),a("li",[t._v("源码是Java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控")]),t._v(" "),a("li",[t._v("天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况")]),t._v(" "),a("li",[a("strong",[t._v("RoketMQ")]),t._v("在稳定性上可能更值得信赖，这些业务场景在阿里双十一已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择"),a("strong",[t._v("RocketMQ")])])]),t._v(" "),a("h4",{attrs:{id:"rocketmq缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq缺点"}},[t._v("#")]),t._v(" RocketMQ缺点")]),t._v(" "),a("ul",[a("li",[t._v("支持的客户端语言不多，目前是Java及c++，其中c++不成熟")]),t._v(" "),a("li",[t._v("社区活跃度不是特别活跃那种")]),t._v(" "),a("li",[t._v("没有在MQ核心中去实现JMS等接口，有些系统要迁移需要修改大量代码")])]),t._v(" "),a("h3",{attrs:{id:"消息去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息去重"}},[t._v("#")]),t._v(" 消息去重")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("去重原则")]),t._v("：使用业务端逻辑保持幂等性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("幂等性")]),t._v("：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用，数据库的结果都是唯一性，不可变的。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("去重策略")]),t._v("：保证每条消息都有唯一编号（"),a("strong",[t._v("比如唯一流水号")]),t._v("），且保证消息处理成功与去重表的日志同时出现。")]),t._v(" "),a("p",[t._v("建立一个消息表，拿到这个消息做数据库的insert操作，给这个消息做一个唯一主键（primary key）或者唯一约束，那么就算出现重复消费的情况，就会导致主键冲突，那么就不再处理这条消息。")])])]),t._v(" "),a("h3",{attrs:{id:"消息重复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息重复"}},[t._v("#")]),t._v(" 消息重复")]),t._v(" "),a("ul",[a("li",[t._v("消息领域有一个对消息投递的QoS定义，分为：\n"),a("ul",[a("li",[t._v("最多一次（At most once）")]),t._v(" "),a("li",[t._v("至少一次（At least once）")]),t._v(" "),a("li",[t._v("仅一次（Exaclly once）")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("QoS：Quality of Service，服务质量")])]),t._v(" "),a("ul",[a("li",[t._v("几乎所有的MQ产品都声称自己做到了"),a("strong",[t._v("At most once")]),t._v("。")]),t._v(" "),a("li",[t._v("既然是至少一次，那避免不了消息重复，尤其是在分布式网络环境下。")]),t._v(" "),a("li",[t._v("比如：网络原因闪断，ACK返回失败等等故障，确认信息没有传送到消息队列，导致消息队列不知道自己已经消费过该消息了，再次将消息分发给其他的消费者。")]),t._v(" "),a("li",[t._v("不同的消费队列发送的确认信息形式不同，例如"),a("strong",[t._v("RabbitMQ")]),t._v("是发送一个ACK确认消息，"),a("strong",[t._v("RocketMQ")]),t._v("是返回一个CONSUME，SUCCESS成功标志，"),a("strong",[t._v("Kafka")]),t._v("实际上有个Offset的概念。")]),t._v(" "),a("li",[a("strong",[t._v("RocketMQ")]),t._v("没有内置消息去重的解决方案，最新版本是否支持还需确认。")])]),t._v(" "),a("h3",{attrs:{id:"消息的可用性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息的可用性"}},[t._v("#")]),t._v(" 消息的可用性")]),t._v(" "),a("ul",[a("li",[t._v("当我们选择好了集群模式之后，那么我们需要关系的就是怎么去存储和复制这个数据，"),a("strong",[t._v("RocketMQ")]),t._v("对消息的刷盘提供了同步和异步的策略来满足我们的，当我们选择同步刷盘之后，如果刷盘超时会给返回FLUSH_DISK_TIMEOUT，如果是异步刷盘不会返回刷盘相关信息，选择同步刷盘可以尽最大程度满足我们的消息不会丢失。")]),t._v(" "),a("li",[t._v("除了存储有选择之后，我们的主从同步提供了同步和异步两种模式来进行复制，当然选择同步可以提升可用性，但是消息的发送RT时间会下降10%左右。")]),t._v(" "),a("li",[a("strong",[t._v("RocketMQ")]),t._v("采用的是混合型的存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。")]),t._v(" "),a("li",[t._v("而"),a("strong",[t._v("Kafka")]),t._v("采用的是独立 型的存储结构，每个队列一个文件。")]),t._v(" "),a("li",[t._v("我认为"),a("strong",[t._v("RocketMQ")]),t._v("采用混合型存储结构的缺点在于，会存在较多的随机操作，因此读的效率会偏低。同时消费消息需要依赖"),a("strong",[t._v("ConsumerQueue")]),t._v("，构建该逻辑消费队列需要一定开销。")])]),t._v(" "),a("h3",{attrs:{id:"rocketmq刷盘实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq刷盘实现"}},[t._v("#")]),t._v(" RocketMQ刷盘实现")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Broker")]),t._v("在消息的存取时直接操作的是内存（内存映射文件），这可以提供系统的吞吐量，但是无法避免机器掉电时数据丢失，所以需要持久化到磁盘中。")]),t._v(" "),a("li",[t._v("刷盘的最终实现都是"),a("strong",[t._v("NIO")]),t._v("中的MappedByteBuffer.force()将映射区的数据写入到磁盘，如果是同步刷盘的话，在"),a("strong",[t._v("Broker")]),t._v("把消息写到"),a("strong",[t._v("CommitLog")]),t._v("映射区后，就会等待写入完成。")]),t._v(" "),a("li",[t._v("异步而言，只是唤醒对应的线程，不保证执行的时机，流程如图所示。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ10.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"顺序消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序消息"}},[t._v("#")]),t._v(" 顺序消息")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("简单说一下使用"),a("strong",[t._v("RoketMQ")]),t._v("里面的一个简单实现。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Tip")]),t._v("：为什么要用"),a("strong",[t._v("RocketMQ")]),t._v("举例呢，这个是阿里开源的，很多公司都有使用，具体细节后面会在"),a("strong",[t._v("RocketMQ")]),t._v("和"),a("strong",[t._v("Kafka")]),t._v("各自的章节说到。")])]),t._v(" "),a("li",[a("p",[t._v("生产者消费者一般需要保证顺序消息的话，可能就是一个业务场景下的，比如订单的创建、支付、发货、收货。")])]),t._v(" "),a("li",[a("p",[t._v("那这些东西是不是一个订单号呢？一个订单肯定是一个订单号的，那就简单了。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("一个topic下有多个队列")]),t._v("，为了保证发送有序，RocketMQ提供了MessageQueueSelector（消息队列选择器）队列选择机制，他有三种实现：")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ_problem_solving5.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("我们可使用"),a("strong",[t._v("Hash取模法")]),t._v("，让同一个订单发送到同一个队列中，再使用同步发送，只有同个订单的创建消息发送成功，再发送支付消息。这样，我们保证了发送有序。")]),t._v(" "),a("li",[a("strong",[t._v("RocketMQ")]),t._v("的topic内的队列机制，可以保证储存满足"),a("strong",[t._v("FIFO")]),t._v("（first input first output先进先出），剩下的只要消费者顺序消费就行。")]),t._v(" "),a("li",[a("strong",[t._v("RocketMQ")]),t._v("仅保证顺序发送，顺序消费由消费者业务保证。")]),t._v(" "),a("li",[t._v("这里很好理解，一个订单发送的时候放到一个队列里面去，同一个的订单号"),a("strong",[t._v("Hash")]),t._v("一下是不是还是一样的结果，那肯定是一个消费者消费，那顺序就保证了。")]),t._v(" "),a("li",[t._v("真正的顺序消费不同的中间件都有·自己的不同实现，在这里就举个例子，方便思路理解。")]),t._v(" "),a("li",[t._v("那有人可能会想一个队列有序出去，一个消费者消费不就好了，但是"),a("strong",[t._v("消费者是多线程的")]),t._v("，消息是有序给他的，但你可以保证他是有序处理的吗？所以还是一个消费成功了再发下一个稳妥。")])]),t._v(" "),a("h3",{attrs:{id:"分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[t._v("#")]),t._v(" 分布式事务")]),t._v(" "),a("h4",{attrs:{id:"half-message（半消息）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#half-message（半消息）"}},[t._v("#")]),t._v(" Half Message（半消息）")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("是指暂时不能被Consumer消费的消息")]),t._v("。Producer已经把消息成功发送到了Broker端，但此消息被标记为"),a("strong",[t._v("暂不能投递")]),t._v("状态，处于该种状态下的消息称为半消息。需要Producer对消息的"),a("strong",[t._v("二次确认")]),t._v("后，Consumer才能去消费它。")])]),t._v(" "),a("h4",{attrs:{id:"消息回查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息回查"}},[t._v("#")]),t._v(" 消息回查")]),t._v(" "),a("ul",[a("li",[t._v("由于网络闪断，生产者应用重启等原因，导致"),a("strong",[t._v("Producer")]),t._v("端一直没有对"),a("strong",[t._v("Half Message（半消息）"),a("strong",[t._v("进行")]),t._v("二次确认")]),t._v("。这是"),a("strong",[t._v("Brock")]),t._v("服务器会定时扫描"),a("strong",[t._v("长期处于半消息的消息")]),t._v("，会主动询问"),a("strong",[t._v("Producer")]),t._v("端，该消息的最终状态**（Commit或Rollback）"),a("strong",[t._v("，该消息即为")]),t._v("消息回查**。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/RocketMQ11.png",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("A服务先发送Half Message给Brock端，消息中携带B服务即将要 + 100元的信息。")]),t._v(" "),a("li",[t._v("当A服务知道Half Message发送成功后，那么开始第3步执行本地事务。")]),t._v(" "),a("li",[t._v("执行本地事务（会有三种情况：1、执行成功。2、执行失败。3、网络等原因导致没有响应。）")]),t._v(" "),a("li",[t._v("如果本地事务成功，那么Product向Brock服务器发送Commit，这样B服务就可以消费就可以消费该message。")]),t._v(" "),a("li",[t._v("如果本地事务成功，那么Product向Brock服务器发送Rollback，那么就会直接删除上面这条Half Message。")]),t._v(" "),a("li",[t._v("如果因为网络等原因迟迟没有返回失败还是成功，那么会执行RocketMQ的回调接口，来进行事务的回查。")])]),t._v(" "),a("h4",{attrs:{id:"消息过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息过滤"}},[t._v("#")]),t._v(" 消息过滤")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Broker")]),t._v("端消息过滤在"),a("strong",[t._v("Broker")]),t._v("中，按照"),a("strong",[t._v("Consumer")]),t._v("的要求做过滤，优点是减少了对于"),a("strong",[t._v("Consumer")]),t._v("无用信息的网络传输。缺点是增加了Broker的负担，实现相对复杂。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Consumer")]),t._v("端消息过滤，这种过滤方式可由应用完全自定义实现，但是缺点是很多无用的消息要传输到"),a("strong",[t._v("Consumer")]),t._v("端。")])])]),t._v(" "),a("h4",{attrs:{id:"broker的buffer问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#broker的buffer问题"}},[t._v("#")]),t._v(" Broker的Buffer问题")]),t._v(" "),a("ul",[a("li",[t._v("Bro的"),a("strong",[t._v("Buffer")]),t._v("通常指的是Broker中一个队列的内存Buffer大小，这类"),a("strong",[t._v("Buffer")]),t._v("通常大小有限。")]),t._v(" "),a("li",[t._v("另外，RocketMQ没有内存"),a("strong",[t._v("Buffer")]),t._v("概念，RocketMQ的队列都是持久化磁盘，数据定期清除。")]),t._v(" "),a("li",[t._v("RocketMQ同其他MQ有非常显著的区别，RocketMQ的内存"),a("strong",[t._v("Buffer")]),t._v("抽象成一个无线长度的队列，不管有多少数据进来都能装得下，这个无限是有前提的，Broker会定期删除过期的数据。")]),t._v(" "),a("li",[t._v("例如Broker只保存三天的消息，那么这个Buffer虽然长度无限，但是3天前的数据会从队尾被删除。")])]),t._v(" "),a("h4",{attrs:{id:"回溯消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯消费"}},[t._v("#")]),t._v(" 回溯消费")]),t._v(" "),a("ul",[a("li",[t._v("回溯消费是指Consumer已经消费成功的消息，由于业务上的需求需要重新消费，要支持此功能，Broker在向Consumer投递成功消息后，消息仍然需要保留。并且重新消费一般是按照时间维度。")]),t._v(" "),a("li",[t._v("例如由于Consumer系统故障，恢复后需要重新消费1小时前的数据，那么Broker要提供一种机制，可以按照时间维度来回退消费进度。")]),t._v(" "),a("li",[t._v("RocketMQ支持按照时间回溯消费，时间维度精确到毫秒，可以向前回溯，也可以向后回溯。")])]),t._v(" "),a("h4",{attrs:{id:"消息堆积"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息堆积"}},[t._v("#")]),t._v(" 消息堆积")]),t._v(" "),a("ul",[a("li",[t._v("消息中间件的主要功能是异步解耦，还有个重要功能是挡住前端的数据洪峰，保证后端系统的稳定性，这就要求消息中间件具有一定的消息堆积能力，消息堆积分以下两种情况：\n"),a("ul",[a("li",[t._v("消息堆积在内存Buffer中，一旦超过内存Buffer，可以根据一定的丢弃策略来丢弃消息，如CORBANotification规范中描述。适合能容忍丢弃消息的业务，这种情况消息的堆积能力主要在于内存Buffer的大小，而且消息堆积后，性能不会下降太大，因为内存中数据多少对于对外提供的访问能力影响有限。")]),t._v(" "),a("li",[t._v("消息堆积到持久化存储系统中例如DB，KV存储，文件记录形式。当消息不能在内存Cache命中时，要不可避免的访问磁盘，会 产生大量读取IO，读取IO的吞吐量直接决定了消息堆积后的访问能力。")]),t._v(" "),a("li",[t._v("评估消息堆积能力主要有以下四点：\n"),a("ul",[a("li",[t._v("消息能堆积多少条，多少字节？即消息的堆积容量。")]),t._v(" "),a("li",[t._v("消息堆积后，发消息的吞吐量大小，是否会受堆积影响？")]),t._v(" "),a("li",[t._v("消息堆积后，正常消费的Consumer是否会受影响？")]),t._v(" "),a("li",[t._v("消息堆积后，访问在磁盘的消息时，吞吐量有多大？")])])])])])]),t._v(" "),a("h4",{attrs:{id:"定时消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时消息"}},[t._v("#")]),t._v(" 定时消息")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("定时消息是指消息发送到Broker后，不能立刻被Consumer消费，要到特定的时间点或者等待特定的时间后才能被消费。")])]),t._v(" "),a("li",[a("p",[t._v("如果要支持任意的时间精度，在Broker层面，必须要做消息排序，如果再涉及到持久化，那么消息排序要不可避免的产生巨大性能开销。")])]),t._v(" "),a("li",[a("p",[t._v("RocketMQ支持定时消息，但是不支持任意时间精度，支持特定的level，例如定时5s，10s，1m等。")])])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);