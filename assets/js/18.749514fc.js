(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{511:function(v,_,t){"use strict";t.r(_);var r=t(4),a=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("Boxx"),v._v(" "),t("h1",{attrs:{id:"mq消息队列-消息中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq消息队列-消息中间件"}},[v._v("#")]),v._v(" MQ消息队列/消息中间件")]),v._v(" "),t("h2",{attrs:{id:"什么是消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是消息"}},[v._v("#")]),v._v(" 什么是消息")]),v._v(" "),t("ul",[t("li",[v._v("消息是在两台计算机间传送的数据单位。")]),v._v(" "),t("li",[v._v("消息可以非常简单，例如只包含文本字符串；也可以更复杂，可能包含嵌入对象。")])]),v._v(" "),t("h2",{attrs:{id:"什么是mq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是mq"}},[v._v("#")]),v._v(" 什么是MQ")]),v._v(" "),t("ul",[t("li",[v._v("消息队列（MQ）是一种应用程序对应用程序的通信方法。")]),v._v(" "),t("li",[v._v("应用程序通过写和检索出入列队的针对应用程序的数据（消息）来通信，而无需专用连接来链接它们。")]),v._v(" "),t("li",[v._v("消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过队列来通信。")]),v._v(" "),t("li",[v._v("队列的使用除去了接收和发送应用程序同时执行的要求。")])]),v._v(" "),t("h2",{attrs:{id:"mq概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq概述"}},[v._v("#")]),v._v(" MQ概述")]),v._v(" "),t("ul",[t("li",[v._v("消息队列已经逐渐成为企业IT系统内部通信的核心手段。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步"),t("strong",[v._v("RPC")]),v._v("的主要手段之一。当今市面上有很多主流的消息中间件，如老牌的"),t("strong",[v._v("ActiveMQ")]),v._v("、"),t("strong",[v._v("RabbitMQ")]),v._v("，炙手可热的"),t("strong",[v._v("Kafka")]),v._v("，阿里巴巴自主开发"),t("strong",[v._v("RocketMQ")]),v._v("等。")])]),v._v(" "),t("h2",{attrs:{id:"mq的组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq的组成"}},[v._v("#")]),v._v(" MQ的组成")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("Broker")]),v._v(":消息服务器，作为"),t("strong",[v._v("server")]),v._v("提供消息核心服务")]),v._v(" "),t("li",[t("strong",[v._v("Producer")]),v._v(":消息生产者，业务的发起方，负责生产消息传输给"),t("strong",[v._v("Broker")])]),v._v(" "),t("li",[t("strong",[v._v("Consumer")]),v._v(":消息消费者，业务的处理方，负责从"),t("strong",[v._v("Broker")]),v._v("获取消息并进行业务逻辑处理")]),v._v(" "),t("li",[t("strong",[v._v("Topic")]),v._v(":主题，发布订阅模式下的消息统一汇聚地，不同生产者向"),t("strong",[v._v("Topic")]),v._v("发送消息，由MQ服务器分发到不同的订阅者，实现消息的广播")]),v._v(" "),t("li",[t("strong",[v._v("Queue")]),v._v(":队列，PTP模式下，特定生产者向特定"),t("strong",[v._v("Queue")]),v._v("发送消息，"),t("strong",[v._v("Consumer")]),v._v("订阅特定的"),t("strong",[v._v("Queue")]),v._v("完成指定的接收")]),v._v(" "),t("li",[t("strong",[v._v("Message")]),v._v(":消息体，根据不同通信协议定义的固定格式进行编码的数据包，来封装业务数据，实现消息的传输")])]),v._v(" "),t("h2",{attrs:{id:"为什么使用mq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用mq"}},[v._v("#")]),v._v(" 为什么使用MQ")]),v._v(" "),t("ul",[t("li",[v._v("业务体量很小时直接单机一把梭就都能搞定了，但是随着业务体量不断扩大，采用"),t("strong",[v._v("微服务")]),v._v("的设计思想，"),t("strong",[v._v("分布式")]),v._v("的部署方式，所以拆分了很多的服务，随着体量的增加以及业务场景越来越复杂，很多场景单机的技术栈和"),t("strong",[v._v("中间件")]),v._v("已经不够用了，而且对于系统的友好度也下降了，最终决定引入"),t("strong",[v._v("消息队列中间件")]),v._v("。")])]),v._v(" "),t("h3",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景")]),v._v(" "),t("h4",{attrs:{id:"异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[v._v("#")]),v._v(" 异步")]),v._v(" "),t("ul",[t("li",[v._v("以下单系统为例：基本流程为下单-支付-交易完成。")]),v._v(" "),t("li",[v._v("不过随着系统升级，可能会添加"),t("strong",[v._v("积分系统")]),v._v("，"),t("strong",[v._v("优惠券系统")]),v._v("，"),t("strong",[v._v("短信系统")]),v._v("等等。")]),v._v(" "),t("li",[v._v("随着系统的增多，完成一个流程可能需要"),t("strong",[v._v("几十秒的时间")]),v._v("，那对于用户来说，自然不会在你这进行购买。")])]),v._v(" "),t("blockquote",[t("p",[v._v("一般的互联网企业，对于用户请求响应的时间要求在100ms-200ms之间，这样，用户的眼睛存在视觉暂停现象。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ1.png",alt:""}})]),v._v(" "),t("ul",[t("li",[t("p",[v._v("由上图可知链路一旦长了，完成链路所消耗的时间也就变长。")])]),v._v(" "),t("li",[t("p",[v._v("不过不难发现，我们可以将上面的流程同时做，支付成功后，同时校验优惠券、增减积分、发送短信。")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ2.png",alt:""}})]),v._v(" "),t("ul",[t("li",[t("p",[v._v("正常流程没法实现这个过程，于是我们可以使用异步、")])]),v._v(" "),t("li",[t("p",[v._v("对比一下两个流程，我们可以发现，这样子，用户只需100毫秒就能知道下单成功了。")])])]),v._v(" "),t("h4",{attrs:{id:"解耦"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解耦"}},[v._v("#")]),v._v(" 解耦")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("上面的情况可以用线程、线程池去完成，那为什么不用线程去做呢")])]),v._v(" "),t("li",[t("p",[v._v("首先，用线程去做，一个订单流程，扣积分、扣优惠券、发短信、扣库存等等这么多业务要调用这么多接口，每次加一个业务就要"),t("strong",[v._v("调用一个接口")]),v._v("，然后还要"),t("strong",[v._v("重新发布系统")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("其次，真的全部写在一起的话，不单单是耦合这一个问题，出问题排查也麻烦，流程中随便一个地方出问题搞不好会影响到其他的点，可能说每个流程都"),t("strong",[v._v("try catch")]),v._v("就可以了，这样的代码可能就会是一个"),t("strong",[v._v("定时炸弹")]),v._v("，平时不炸，偏偏做活动的时候炸，那这个时候可能就是GG了。")])]),v._v(" "),t("li",[t("p",[v._v("此时"),t("strong",[v._v("消息队列")]),v._v("的作用就体现出来了，它可以将上面的问题迎刃而解。")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://jingdomaaa-image.oss-cn-hangzhou.aliyuncs.com/Image-Hosting-Service/MQ3.png",alt:""}})]),v._v(" "),t("ul",[t("li",[t("p",[v._v("下单后，把"),t("strong",[v._v("支付成功的消息告诉给别的系统")]),v._v("，他们收到之后去处理，我们只需要自己的流程运行完，把自己的消息发送出去，然后其他系统直接订阅我发送的支付成功的消息，我支付成功了别人监听就行了。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("tip")]),v._v("：这里可以看出消息队列的一个缺点，下单系统的流程走完了，如果其他系统失败了，比如下单了积分却没扣、短信没发，下单系统是没法得知的。涉及到"),t("strong",[v._v("分布式事务")]),v._v("，我下面会提到。")])])]),v._v(" "),t("h4",{attrs:{id:"削峰"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#削峰"}},[v._v("#")]),v._v(" 削峰")]),v._v(" "),t("ul",[t("li",[v._v("以秒杀活动为例，平时流量很低，秒杀活动00:00时，流量疯狂怼进来，我们的服务器、"),t("strong",[v._v("Redis")]),v._v("，"),t("strong",[v._v("MySQL")]),v._v("各自的承受能力都不一样，直接"),t("strong",[v._v("全部流量照单全收")]),v._v("自然有问题，直接就打挂了。")]),v._v(" "),t("li",[v._v("此时我们就可以把请求放到队列里面，之后每秒消费多少请求，就看自己的服务器的处理能力，能处理5000QPS就消费这么多，可能会比正常慢一些，但不至于打挂服务器，等流量高峰下去了，服务也就没压力了。")]),v._v(" "),t("li",[v._v("阿里双十一00:00的时候那么多流量瞬间涌进去，他有的时候回慢一些，但人家没挂，或者降级给你个友好的提示页面，等高峰过去了又是一条好汉。")])]),v._v(" "),t("h2",{attrs:{id:"mq的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq的缺点"}},[v._v("#")]),v._v(" "),t("RouterLink",{attrs:{to:"/blogs/back_end/2020/MQ_problem_solving.html"}},[v._v("MQ的缺点")])],1),v._v(" "),t("h3",{attrs:{id:"系统复杂性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统复杂性"}},[v._v("#")]),v._v(" 系统复杂性")]),v._v(" "),t("ul",[t("li",[v._v("在原本较简单的一个系统当中接入了一个中间件，需要考虑维护中间件。")]),v._v(" "),t("li",[v._v("使用过程中需要考虑"),t("strong",[v._v("消息重复消费")]),v._v("、"),t("strong",[v._v("消息丢失")]),v._v("、"),t("strong",[v._v("消息的顺序消费")]),v._v("等问题。")])]),v._v(" "),t("h3",{attrs:{id:"数据一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据一致性"}},[v._v("#")]),v._v(" 数据一致性")]),v._v(" "),t("ul",[t("li",[v._v("这个其实是"),t("strong",[v._v("分布式服务")]),v._v("本身就存在的一个问题，"),t("strong",[v._v("不仅仅是消息队列的问题")]),v._v("，放在这里说是因为用了消息队列这个问题会暴露的比较严重。")]),v._v(" "),t("li",[v._v("在使用场景解耦中就已经提到，下单系统返回成功，用户认为他支付的请求已经成功了，结果积分扣了，短信发了，优惠券没给人家用，这就是数据不一致。")])]),v._v(" "),t("h3",{attrs:{id:"可用性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可用性"}},[v._v("#")]),v._v(" 可用性")]),v._v(" "),t("ul",[t("li",[v._v("系统引入的外部依赖越多，越容易挂掉，MQ挂掉之后会导致整个系统不可用")])]),v._v(" "),t("h3",{attrs:{id:"mq技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq技术选型"}},[v._v("#")]),v._v(" MQ技术选型")]),v._v(" "),t("ul",[t("li",[v._v("目前在市面上比较主流的消息队列中间件主要有，Kafka、ActiveMQ、RabbitMQ、RocketMQ等这几种。")]),v._v(" "),t("li",[v._v("其中ActiveMQ和RabbitMQ因为其"),t("strong",[v._v("单机吞吐量")]),v._v("还有"),t("strong",[v._v("GitHub")]),v._v("的社区活跃度的原因，在各大互联网公司都已经基本绝迹了，业务体量一般的公司会是有在用的，但是越来越多的公司更青睐RocketMQ这样的消息中间件了。")]),v._v(" "),t("li",[v._v("Kafka和RocketMQ一直在各自擅长的领域发光发亮，不过大厂也有可能是用各自的中间件，可能做过修改，也可能是自研的。")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("特性")]),v._v(" "),t("th",[v._v("ActiveMQ")]),v._v(" "),t("th",[v._v("RabbitMQ")]),v._v(" "),t("th",[v._v("RocketMQ")]),v._v(" "),t("th",[v._v("kafka")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("单机吞吐量")]),v._v(" "),t("td",[v._v("万级")]),v._v(" "),t("td",[v._v("万级")]),v._v(" "),t("td",[v._v("10万级，支撑高吞吐")]),v._v(" "),t("td",[v._v("10万级别，高吞吐。一般配合大数据类的系统来进行实时数据计算、日志采集等场景")])]),v._v(" "),t("tr",[t("td",[v._v("topic数量对吞吐量的影响")]),v._v(" "),t("td"),v._v(" "),t("td"),v._v(" "),t("td",[v._v("topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic")]),v._v(" "),t("td",[v._v("topic从几十个到几百个的时候，吞吐量会大幅度下降所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源")])]),v._v(" "),t("tr",[t("td",[v._v("时效性")]),v._v(" "),t("td",[v._v("ms级")]),v._v(" "),t("td",[v._v("微秒级，这是rabbitmq的一大特点，延迟是最低的")]),v._v(" "),t("td",[v._v("ms级")]),v._v(" "),t("td",[v._v("ms级以内")])]),v._v(" "),t("tr",[t("td",[v._v("可用性")]),v._v(" "),t("td",[v._v("高，基于主从架构实现高可用")]),v._v(" "),t("td",[v._v("同ActiveMQ")]),v._v(" "),t("td",[v._v("非常高，基于分布式架构")]),v._v(" "),t("td",[v._v("同RocketMQ")])]),v._v(" "),t("tr",[t("td",[v._v("消息可靠性")]),v._v(" "),t("td",[v._v("有较低的概率丢失数据")]),v._v(" "),t("td",[v._v("基本不丢")]),v._v(" "),t("td",[v._v("经过参数优化设置，可以做到0丢失")]),v._v(" "),t("td",[v._v("同RocketMQ")])]),v._v(" "),t("tr",[t("td",[v._v("功能支持")]),v._v(" "),t("td",[v._v("MQ领域的功能及其完善")]),v._v(" "),t("td",[v._v("基于erlang开发，并发能力强，性能极好，延迟很低")]),v._v(" "),t("td",[v._v("MQ功能较为完善，还是分布式的，扩展性好")]),v._v(" "),t("td",[v._v("功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算及日志采集被大规模使用")])]),v._v(" "),t("tr",[t("td",[v._v("社区活跃度")]),v._v(" "),t("td",[v._v("低")]),v._v(" "),t("td",[v._v("中")]),v._v(" "),t("td",[v._v("高")]),v._v(" "),t("td",[v._v("高")])]),v._v(" "),t("tr",[t("td",[v._v("优劣势总结")]),v._v(" "),t("td",[v._v("非常成熟，功能强大，在业内大量的公司以及项目中都有应用偶尔会有较低概率丢失消息而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少几个月才发布一个版本而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用")]),v._v(" "),t("td",[v._v("erlang语言开发，性能极其好，延时很低；吞吐量到万级，MQ功能比较完备而且开源提供的管理界面非常棒，用起来很好用社区相对比较活跃，几乎每个月都发布几个版本分在国内一些互联网公司近几年用rabbitmq也比较多一些但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。")]),v._v(" "),t("td",[v._v("接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的")]),v._v(" "),t("td",[v._v("kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集")])])])]),v._v(" "),t("ul",[t("li",[v._v("其实一下子就可以看到差距了，就拿"),t("strong",[v._v("吞吐量")]),v._v("来说，早期比较活跃的"),t("strong",[v._v("ActiveMQ")]),v._v("和"),t("strong",[v._v("RabbitMQ")]),v._v("基本上不是后两者的对手了，在现在这样大数据的年代，"),t("strong",[v._v("吞吐量是真的很重要")]),v._v("。")]),v._v(" "),t("li",[v._v("就"),t("strong",[v._v("部署方式")]),v._v("而言,两者也是大不如后面两个分布式架构的MQ，都是高可用的分布式架构，而且多个副本的数据也能做到0丢失。")]),v._v(" "),t("li",[v._v("再聊下"),t("strong",[v._v("RabbitMQ")]),v._v("，这个中间件其实还行，但是它的开发语言是"),t("strong",[v._v("erlang")]),v._v("，开发维护成本想都想不到，出个问题都查半天。")]),v._v(" "),t("li",[v._v("至于"),t("strong",[v._v("RocketMQ")]),v._v("(阿里开源的)，git活跃度还可以，基本上push了自己的bug确认了有问题都有阿里的大佬跟你试试解答并修复的，他的架构设计部分同样是阿里开源的一个"),t("strong",[v._v("RPC框架")]),v._v("("),t("strong",[v._v("Dubbo")]),v._v(")是真的很像，可能是因为师出同门吧。")]),v._v(" "),t("li",[t("strong",[v._v("Kafka")]),v._v("作为最后"),t("strong",[v._v("压轴")]),v._v("的，其在大数据领域，公司的日志采集，实时计算等场景都离不开它的身影，它基本上算是"),t("strong",[v._v("世界级范围的消息队列标杆")]),v._v("了。")]),v._v(" "),t("li",[v._v("当然并不是说百分百就哪个MQ绝对好，真正的选型还是要"),t("strong",[v._v("深入研究")]),v._v("的，不然你公司一天"),t("strong",[v._v("PV")]),v._v("就1000，你告诉我你要去用"),t("strong",[v._v("Kafka")]),v._v("，我只能说你吃饱了撑的。")])]),v._v(" "),t("blockquote",[t("p",[v._v("PV：页面浏览量，与之意思相近的UV意思是网络独立访客量")])]),v._v(" "),t("ul",[t("li",[t("em",[v._v("没有最好的技术，只有最适合的技术，不要为了用而用。")])])])],1)}),[],!1,null,null,null);_.default=a.exports}}]);